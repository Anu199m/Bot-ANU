const axios = require("axios");
const request = require("request");

module.exports.config = {
  name: "hercai",
  version: "1.6.1",
  hasPermission: 0,
  credits: "SHANKAR SIR",
  description: "AI ‡§¨‡•â‡§ü ‡§ú‡•ã ‡§π‡§∞ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•ã ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§ï‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§ó‡§æ",
  commandCategory: "AI",
  usages: "[‡§¨‡•â‡§ü ‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§™‡§∞ ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç]",
  cooldowns: 5,
};

let userMemory = {};
let isActive = true;
let userLanguage = {};

// ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§≠‡§æ‡§∑‡§æ‡§è‡§Å
const supportedLanguages = {
  bhojpuri: "bho", urdu: "ur", punjabi: "pa", nepali: "ne",
  english: "en", hindi: "hi", french: "fr", spanish: "es",
  russian: "ru", italian: "it", arabic: "ar", german: "de",
  portuguese: "pt", korean: "ko", bengali: "bn", marathi: "mr",
  maithili: "mai", tamil: "ta", gujrati: "gu", sanskrit: "sa"
};

// **‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§≤‡•á‡§∂‡§® ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®**
const translateText = async (text, targetLang) => {
  return new Promise((resolve, reject) => {
    request(
      encodeURI(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${targetLang}&dt=t&q=${text}`),
      (err, res, body) => {
        if (err) return reject("Translation failed.");
        try {
          const translated = JSON.parse(body);
          let translatedText = "";
          translated[0].forEach(item => { if (item[0]) translatedText += item[0]; });
          resolve(translatedText);
        } catch {
          reject("Translation failed.");
        }
      }
    );
  });
};

// **‡§¨‡•â‡§ü ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§á‡§µ‡•á‡§Ç‡§ü**
module.exports.handleEvent = async function ({ api, event }) {
  const { threadID, messageID, senderID, body, messageReply } = event;
  if (!isActive || !body) return;

  const lowerBody = body.toLowerCase();

  // **‡§≠‡§æ‡§∑‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó**
  if (supportedLanguages[lowerBody]) {
    userLanguage[senderID] = supportedLanguages[lowerBody];
    return api.sendMessage(`‚úÖ ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Ö‡§¨ *${lowerBody}* ‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§`, threadID);
  }

  // **‡§Ö‡§ó‡§∞ ‡§Ø‡•Ç‡§ú‡§∞ ‡§®‡•á ‡§¨‡•â‡§ü ‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§™‡§∞ ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ, ‡§§‡•ã ‡§ï‡•Å‡§õ ‡§Æ‡§§ ‡§ï‡§∞‡•ã**
  if (!messageReply || messageReply.senderID !== api.getCurrentUserID()) return;

  const userQuery = body.trim();

  // **‡§Ø‡•Ç‡§ú‡§∞ ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§≤‡•ã‡§° ‡§ï‡§∞‡•ã**
  if (!userMemory[senderID]) userMemory[senderID] = [];

  // **‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§æ ‡§™‡§ø‡§õ‡§≤‡§æ ‡§ï‡§®‡•ç‡§µ‡§∞‡•ç‡§∏‡•á‡§∂‡§® ‡§ú‡•ã‡§°‡§º‡•á‡§Ç**
  const conversationHistory = userMemory[senderID].join("\n");
  const fullQuery = conversationHistory + `\nUser: ${userQuery}\nBot:`;

  // **API ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•ã (‡§Ö‡§¨ ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§ö‡•à‡§ü ‡§≠‡•Ä ‡§≠‡•á‡§ú ‡§∞‡§π‡•á ‡§π‡•à‡§Ç)**
  const apiURL = `https://shankar-gpt-3-api.vercel.app/api?message=${encodeURIComponent(fullQuery)}`;

  try {
    const response = await axios.get(apiURL);
    let botReply = response.data.response || "‡§Æ‡•Å‡§ù‡•á ‡§∏‡§Æ‡§ù‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ï‡•ç‡§ï‡§§ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏‡•á ‡§¶‡•ã‡§π‡§∞‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?";

    botReply = await translateText(botReply, userLanguage[senderID] || "hi");

    // **‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•Ä ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç (‡§Ö‡§¨ 15 ‡§Æ‡•à‡§∏‡•á‡§ú ‡§§‡§ï)**
    userMemory[senderID].push(`User: ${userQuery}`);
    userMemory[senderID].push(`Bot: ${botReply}`);
    if (userMemory[senderID].length > 15) userMemory[senderID].splice(0, 2);

    return api.sendMessage({
      body: botReply,
      mentions: [{
        tag: "Bot",
        id: api.getCurrentUserID()
      }]
    }, threadID, messageID);
  } catch (error) {
    console.error("API Error:", error.message);
    return api.sendMessage("‚ùå AI ‡§∏‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§", threadID, messageID);
  }
};

// **‡§¨‡•â‡§ü ‡§ï‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§°**
module.exports.run = async function ({ api, event, args }) {
  const { threadID, messageID, senderID } = event;
  const command = args[0] && args[0].toLowerCase();

  if (command === "on") {
    isActive = true;
    return api.sendMessage("‚úÖ Hercai bot ‡§Ö‡§¨ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡•§", threadID, messageID);
  } else if (command === "off") {
    isActive = false;
    return api.sendMessage("‚ö†Ô∏è Hercai bot ‡§Ö‡§¨ ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡•§", threadID, messageID);
  } else if (command === "clear") {
    if (args[1] && args[1].toLowerCase() === "all") {
      userMemory = {};
      return api.sendMessage("üßπ ‡§∏‡§≠‡•Ä ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•Ä ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§", threadID, messageID);
    }
    if (userMemory[senderID]) {
      delete userMemory[senderID];
      return api.sendMessage("üßπ ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•Ä ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§", threadID, messageID);
    } else {
      return api.sendMessage("‚ö†Ô∏è ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§", threadID, messageID);
    }
  }
};